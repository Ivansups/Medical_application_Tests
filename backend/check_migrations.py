#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∏ Docker
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîç {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            if result.stdout.strip():
                print(f"–í—ã–≤–æ–¥: {result.stdout.strip()}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            print(f"–û—à–∏–±–∫–∞: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False
    
    return True

def check_local_migrations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ"""
    print("\n" + "="*60)
    print("üîß –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ô –í –õ–û–ö–ê–õ–¨–ù–û–ô –°–†–ï–î–ï")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("alembic.ini"):
        print("‚ùå –§–∞–π–ª alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend/")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not os.path.exists("venv"):
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ venv/")
        return False
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    success = run_command(
        "source venv/bin/activate && python -c 'from app.db.models import *; print(\"Models imported successfully\")'",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π"
    )
    
    if not success:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
    success = run_command(
        "source venv/bin/activate && alembic current",
        "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    )
    
    if not success:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
    success = run_command(
        "source venv/bin/activate && alembic history --verbose",
        "–ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    )
    
    if not success:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    success = run_command(
        "source venv/bin/activate && alembic check",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    )
    
    return success

def check_docker_migrations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Docker"""
    print("\n" + "="*60)
    print("üê≥ –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ô –í DOCKER")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
    success = run_command(
        "docker --version",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
    )
    
    if not success:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
    success = run_command(
        "docker ps --filter name=medical_tests",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    )
    
    if not success:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ Docker
    success = run_command(
        "docker exec medical_tests_db psql -U postgres -d medical_application -c 'SELECT version();'",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –≤ Docker"
    )
    
    if not success:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = run_command(
        "docker exec medical_tests_db psql -U postgres -d medical_application -c '\dt'",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –ë–î"
    )
    
    return success

def check_migration_files():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("\n" + "="*60)
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ú–ò–ì–†–ê–¶–ò–ô")
    print("="*60)
    
    migrations_dir = Path("alembic/versions")
    if not migrations_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    migration_files = list(migrations_dir.glob("*.py"))
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migration_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files = [
        "alembic.ini",
        "alembic/env.py",
        "alembic/script.py.mako"
    ]
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    return True

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üîå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = [
        "DATABASE_URL",
        "POSTGRES_USER", 
        "POSTGRES_PASSWORD",
        "POSTGRES_DB",
        "POSTGRES_HOST",
        "POSTGRES_PORT"
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            if "PASSWORD" in var:
                value = "***"
            print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ö†Ô∏è  {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ô –î–õ–Ø –°–ò–°–¢–ï–ú–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    if not check_migration_files():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–π")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not check_database_connection():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    local_ok = check_local_migrations()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –º–∏–≥—Ä–∞—Ü–∏–∏
    docker_ok = check_docker_migrations()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("="*60)
    
    if local_ok:
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏: –û–ö")
    else:
        print("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏: –ü–†–û–ë–õ–ï–ú–´")
    
    if docker_ok:
        print("‚úÖ Docker –º–∏–≥—Ä–∞—Ü–∏–∏: –û–ö")
    else:
        print("‚ùå Docker –º–∏–≥—Ä–∞—Ü–∏–∏: –ü–†–û–ë–õ–ï–ú–´")
    
    if local_ok and docker_ok:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

if __name__ == "__main__":
    main()
